"use strict";(self.webpackChunkxxx252525_github_io=self.webpackChunkxxx252525_github_io||[]).push([[4873],{1021:(t,e)=>{e.A=(t,e)=>{const a=t.__vccOpts||t;for(const[t,d]of e)a[t]=d;return a}},8002:(t,e,a)=>{a.r(e),a.d(e,{comp:()=>g,data:()=>A});var d=a(6254);const i=a.p+"assets/img/image-20240708171143960.da04cfb5.png",r=a.p+"assets/img/image-20240708111941830.8a70bb8a.png",p=a.p+"assets/img/image-20240708112039719.922f36d5.png",o=a.p+"assets/img/image-20240708135851030.c7e7a6e5.png",n=a.p+"assets/img/1720423899948-c794991f-3ef4-4844-9f19-7f2bf0160778.f698b210.jpeg",s=a.p+"assets/img/image-20240708163036895.93a676aa.png",l=a.p+"assets/img/image-20240708162747831.524e679a.png",c={},g=(0,a(1021).A)(c,[["render",function(t,e){return(0,d.uX)(),(0,d.CE)("div",null,e[0]||(e[0]=[(0,d.Fv)('<h1 id="_06-apk的汉化、双开、修改-特别篇" tabindex="-1"><a class="header-anchor" href="#_06-apk的汉化、双开、修改-特别篇"><span>06-Apk的汉化、双开、修改-特别篇</span></a></h1><h2 id="软件准备" tabindex="-1"><a class="header-anchor" href="#软件准备"><span>软件准备</span></a></h2><figure><img src="'+i+'" alt="image-20240708171143960" tabindex="0" loading="lazy"><figcaption>image-20240708171143960</figcaption></figure><h2 id="apk的目录结构" tabindex="-1"><a class="header-anchor" href="#apk的目录结构"><span>Apk的目录结构</span></a></h2><p>我们如果需要对一个软件进行双开、或者汉化修改，我们就必须了解Apk的目录结构，只有了解目录结构，对每个文件目录了如指掌，就知道这个应该如何去修改。</p><p>以Geekbench6的软件包为例，在Google商店下载的包格式是Apks，在其他渠道下载的是Apk，这有什么区别呢？</p><h3 id="apk、apks、xapk的区别" tabindex="-1"><a class="header-anchor" href="#apk、apks、xapk的区别"><span>Apk、Apks、Xapk的区别</span></a></h3><p><strong>APK (Android Application Package)</strong>:</p><p>APK是Android设备上安装应用程序的标准格式，包含Android应用程序的所有组件，如代码、资源、配置文件等。，用户可以直接安装APK文件。</p><p><strong>APKS (Split APKs)</strong>:</p><p>APKS文件实际上是多个APK文件的集合，也称为“split APKs”，它是Google为应对应用程序大小增长而引入的一种解决方案，允许将一个应用程序拆分为多个APK文件，每个文件负责应用程序的一部分。在安装时，这些APK文件被一起安装，但在设备上被视为一个单一的应用程序。这种方式可以优化应用程序的更新过程，用户只需下载更改过的部分，而不是整个应用程序。</p><p><strong>XAPK (OBB Data File with APK)</strong>:</p><p>XAPK文件是一种扩展的APK文件格式，通常与APK文件一起使用。包含了APK文件和一个或多个OBB（Opaque Binary Blob）文件。OBB文件通常包含应用程序的大文件，如纹理、音效等，它们被存储在设备的扩展存储中，如SD卡。XAPK文件不能直接安装，需要使用特定的应用程序安装器。这个包格式并不常见，所以我们也不讲这种扩展APK文件格式。</p><h3 id="apk的目录结构-1" tabindex="-1"><a class="header-anchor" href="#apk的目录结构-1"><span>Apk的目录结构</span></a></h3><p><img src="'+r+'" alt="image-20240708111941830" style="zoom:80%;"><img src="'+p+'" alt="image-20240708112039719" style="zoom:80%;"></p><hr><p>以上面两个软件包为例，可以看出差别很大，小米相机有更多的目录和文件，但是主要的目录并不会改变。</p><table><thead><tr><th>文件目录</th><th>注释</th></tr></thead><tbody><tr><td>assets</td><td>存放APK的静态资源文件、视频、图片、音频等，与res不同的是文件不需要编译</td></tr><tr><td>lib</td><td>应用程序的库文件，常见子目录为架构目录如<code>armeabi-v7a</code>、<code>arm64-v8a</code>、<code>x86</code>等</td></tr><tr><td>META-INF</td><td>Apk签名信息存放目录，用于校验APK文件的完整性，身份验证</td></tr><tr><td>res</td><td>应用程序的资源文件，包括图像、音频，但是这些资源常常被用于程序的编译</td></tr><tr><td>AndoridManifest.xml</td><td>APK的核心文件，定义了程序的名称、版本、权限、引用的库文件等信息</td></tr><tr><td>classes.dex</td><td>程序的所有可执行代码，apk运行的主要逻辑，这是由Java源码编译的Dalvik可执行文件（Java字节码文件）</td></tr><tr><td>resources.arsc</td><td>编译后的二进制文件，相当于一个映射表，包含了所有资源的ID和对应的信息，可以快速查找资源</td></tr><tr><td>其他</td><td>例如小米相机里面其他的文件和目录</td></tr></tbody></table><p>其他的目录详解：</p><ul><li><code>Kotlin</code>目录表明该软件是用Kotlin编写的，现在大部分的APP都是由Kotlin，Kotlin的Java的超集，是google和Jetbrains在Java的基础上进行一些改进，设计上与Java是兼容的，比Java更高效、更安全。</li><li><code>okhttp3</code>是一个用于 Android 和 Java 应用程序的 HTTP 和 HTTP/2 客户端。非常流行的网络请求库，因为它提供了简洁的 API、高效的性能和良好的扩展性。</li><li><code>google</code>目录里面存放了谷歌相关的资源文件和服务。比如谷歌广告。</li><li><code>org</code> 目录通常包含了应用程序的业务逻辑代码，里面存放着域名等开放的网站信息，一般是和APP的业务相关，比如apache、nginx、openresty等。</li><li><code>license</code> 通常指的是应用程序所使用的第三方库或资源的许可证信息。</li></ul><h3 id="apks的目录结构" tabindex="-1"><a class="header-anchor" href="#apks的目录结构"><span>Apks的目录结构</span></a></h3><img src="'+o+'" alt="image-20240708135851030" style="zoom:80%;"><hr><p>这是来自谷歌商店的Geekbench6软件包，包的格式是apks，可以看完，目录结构和apk是完全不一样的。</p><table><thead><tr><th>目录文件</th><th>注释</th></tr></thead><tbody><tr><td>base.apk</td><td>这是最基本的APK文件，里面包含了APK的核心代码和资源</td></tr><tr><td>Split APKs</td><td>Split APKs就是Split_xxx.apk等APK文件，如下面四个apk</td></tr><tr><td>split_config.arm64_v8a.apk</td><td>针对ARM64处理器优化的APK，拥有更好的性能，例如骁龙、联发科等芯片</td></tr><tr><td>split_config.xxxhdpi.apk</td><td>针对特定屏幕密度的分拆 APK 文件，确保应用程序在不同设备上的显示效果xxxhdpi密度大约是480dpi</td></tr><tr><td>split_config.zh.apk</td><td>针对特定语言区域（在这里是中文）的分拆 APK 文件</td></tr></tbody></table><p>所以在APKs的安装包中，更新的时候一般是base.apk文件。其他的文件都是固定辅助base.apk主要apk文件的。在Split APKs等APK包下面都是存在<code>META-INF</code>、<code>res</code>、<code>lib</code>等文件目录的。</p><h2 id="应用双开原理" tabindex="-1"><a class="header-anchor" href="#应用双开原理"><span>应用双开原理</span></a></h2><p>**修改包名：**将应用程序的apk包名更改为一个新的、独一无二的标识符，这样系统就会将其视为一个与原应用不同的新应用。</p><p>**修改Framwork：**对 Android 操作系统的底层代码进行修改。例如小米双开。</p><p>**虚拟化：**虚拟Framwork层、文件系统、模拟安卓等，在设备上创建一个虚拟环境，在这个环境中可以运行应用程序。</p><p>**插件机制运行：**利用反射替换，动态代理，Hook系统大部分与system-server进程通信的函数，欺骗系统，让系统以为只有一个apk在运行。</p><h2 id="汉化apk" tabindex="-1"><a class="header-anchor" href="#汉化apk"><span>汉化APK</span></a></h2><p>APK 汉化是指将 Android 应用程序的 APK 文件中的资源文本、界面元素、提示信息等从原始语言翻译成中文，通过资源提取、翻译、修改、回写等一系列操作使APK汉化。</p><p><strong>汉化流程如下：</strong></p><img src="'+n+'" alt="img" style="zoom:60%;"><p><strong>流程图制作：语雀</strong></p><h2 id="apk基础修改" tabindex="-1"><a class="header-anchor" href="#apk基础修改"><span>APK基础修改</span></a></h2><p>前面我们说了<code>AndoridManifest.xml</code>文件是整个程序的信息描述文件，包含了程序的名称、版本、权限、引用的库文件等信息，其中还包括一些组件的信息，每一个apk的目录下都有一个<code>AndoridManifest.xml</code>文件，并且这个我呢间名称是不能修改的，优点类似于Linux俺还在那个软件的环境依赖程序（各种libxxx程序包），从逆向的角度来说AndoridManifest.xml文件就变相的成为了暴露信息的文件，他们各自实现的类和各种功能、数据处理等都是透明的，当然普通用户是不在意这些的。</p><figure><img src="'+s+'" alt="image-20240708163036895" tabindex="0" loading="lazy"><figcaption>image-20240708163036895</figcaption></figure><figure><img src="'+l+'" alt="image-20240708162747831" tabindex="0" loading="lazy"><figcaption>image-20240708162747831</figcaption></figure><table><thead><tr><th>属性</th><th>定义</th></tr></thead><tbody><tr><td>versionCode</td><td>版本号</td></tr><tr><td>versionName</td><td>版本名</td></tr><tr><td>users-permission android:name=&quot; &quot;</td><td>应用权限</td></tr><tr><td>android:label=&quot;@string/app_name&quot;</td><td>应用名称</td></tr><tr><td>android:icon=&quot;@mipmap/ic_launcher&quot;</td><td>应用图标路径</td></tr><tr><td>android:debuggable=&quot;true&quot;</td><td>是否开启debug权限</td></tr><tr><td>android:compileSdkVersion=&quot;33&quot;</td><td>SDK版本</td></tr><tr><td>android:compileSdkVersionCodename=&quot;13</td><td>SDK对应安卓版本代号，指的是 Android 33 版本的代号（对应Android13）</td></tr><tr><td>package=&quot;com.android.camera&quot;</td><td>应用包名</td></tr><tr><td>platformBuildVersionCode=&quot;33&quot;</td><td>平台版本代码，33版本代码对应Android14版本</td></tr><tr><td>platformBuildVersionName=&quot;13&quot;</td><td>平台版本名称，Android 12 的版本名称是 “S”（Swan），Android 13 的版本名称是 “T”（Tiramisu），依此类推。</td></tr></tbody></table><div class="hint-container caution"><p class="hint-container-title">警告</p><p>注意：Android 版本的代号是用于标记开发版本（Preview）的，它们通常以数字 “13”、“14” 等形式出现， Android 33 版本的代号，这一点可以在AndroidStudio中下载Android SDK的时候就可以看到。</p></div>',42)]))}]]),A=JSON.parse('{"path":"/AndroidReverse/01-Android%E5%9F%BA%E7%A1%80/06-Apk%E7%9A%84%E6%B1%89%E5%8C%96%E3%80%81%E5%8F%8C%E5%BC%80%E3%80%81%E4%BF%AE%E6%94%B9.html","title":"06-Apk的汉化、双开、修改-特别篇","lang":"zh-CN","frontmatter":{"icon":"/assets/icon/android.svg","category":["Android逆向"],"contributors":true,"lastUpdated":true,"pageview":true,"isOriginal":true,"description":"06-Apk的汉化、双开、修改-特别篇 软件准备 image-20240708171143960image-20240708171143960 Apk的目录结构 我们如果需要对一个软件进行双开、或者汉化修改，我们就必须了解Apk的目录结构，只有了解目录结构，对每个文件目录了如指掌，就知道这个应该如何去修改。 以Geekbench6的软件包为例，在Goo...","head":[["meta",{"property":"og:url","content":"https://xxx252525.github.io/AndroidReverse/01-Android%E5%9F%BA%E7%A1%80/06-Apk%E7%9A%84%E6%B1%89%E5%8C%96%E3%80%81%E5%8F%8C%E5%BC%80%E3%80%81%E4%BF%AE%E6%94%B9.html"}],["meta",{"property":"og:site_name","content":"天阁创客的三味书屋"}],["meta",{"property":"og:title","content":"06-Apk的汉化、双开、修改-特别篇"}],["meta",{"property":"og:description","content":"06-Apk的汉化、双开、修改-特别篇 软件准备 image-20240708171143960image-20240708171143960 Apk的目录结构 我们如果需要对一个软件进行双开、或者汉化修改，我们就必须了解Apk的目录结构，只有了解目录结构，对每个文件目录了如指掌，就知道这个应该如何去修改。 以Geekbench6的软件包为例，在Goo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-15T05:06:19.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-15T05:06:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06-Apk的汉化、双开、修改-特别篇\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-15T05:06:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"天阁创客official\\",\\"url\\":\\"https://tiangesec.org.cn\\",\\"email\\":\\"tiangesec@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"软件准备","slug":"软件准备","link":"#软件准备","children":[]},{"level":2,"title":"Apk的目录结构","slug":"apk的目录结构","link":"#apk的目录结构","children":[{"level":3,"title":"Apk、Apks、Xapk的区别","slug":"apk、apks、xapk的区别","link":"#apk、apks、xapk的区别","children":[]},{"level":3,"title":"Apk的目录结构","slug":"apk的目录结构-1","link":"#apk的目录结构-1","children":[]},{"level":3,"title":"Apks的目录结构","slug":"apks的目录结构","link":"#apks的目录结构","children":[]}]},{"level":2,"title":"应用双开原理","slug":"应用双开原理","link":"#应用双开原理","children":[]},{"level":2,"title":"汉化APK","slug":"汉化apk","link":"#汉化apk","children":[]},{"level":2,"title":"APK基础修改","slug":"apk基础修改","link":"#apk基础修改","children":[]}],"git":{"createdTime":1739595979000,"updatedTime":1739595979000,"contributors":[{"name":"xxx252525","username":"xxx252525","email":"1072441436@qq.com","commits":1,"url":"https://github.com/xxx252525"}]},"readingTime":{"minutes":7.04,"words":2113},"filePathRelative":"AndroidReverse/01-Android基础/06-Apk的汉化、双开、修改.md","localizedDate":"2025年2月15日","autoDesc":true}')}}]);
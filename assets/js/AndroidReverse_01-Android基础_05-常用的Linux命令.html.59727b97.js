"use strict";(self.webpackChunkxxx252525_github_io=self.webpackChunkxxx252525_github_io||[]).push([[2119],{1021:(i,a)=>{a.A=(i,a)=>{const e=i.__vccOpts||i;for(const[i,s]of a)e[i]=s;return e}},2317:(i,a,e)=>{e.r(a),e.d(a,{comp:()=>ri,data:()=>pi});var s=e(6254);const t=e.p+"assets/img/image-20241015161300285.7e6b8474.png",l=e.p+"assets/img/image-20241015164009168.58e1fdde.png",n=e.p+"assets/img/image-20241015164852079.4e14445f.png",d=e.p+"assets/img/image-20241015165641219.503fdd4b.png",g=e.p+"assets/img/image-20241015165724457.570e72bc.png",r=e.p+"assets/img/image-20241015170327112.9c45046a.png",p=e.p+"assets/img/image-20241015170941895.ec8a2509.png",h=e.p+"assets/img/image-20241015171048885.c4c14983.png",c=e.p+"assets/img/image-20241015172819632.7981ce17.png",o=e.p+"assets/img/image-20241015173103872.63447a42.png",k=e.p+"assets/img/image-20241015171910618.347e1b9e.png",m=e.p+"assets/img/image-20241015173548381.efb9da5d.png",f=e.p+"assets/img/image-20241015173820239.5e0917b9.png",u=e.p+"assets/img/image-20241015173957378.8c2b0b71.png",y=e.p+"assets/img/image-20241015174055024.aeedef8c.png",A=e.p+"assets/img/image-20241015174351641.9aaece1b.png",b=e.p+"assets/img/image-20241015174624555.7b80686c.png",x=e.p+"assets/img/image-20241015174809433.17e92c94.png",F=e.p+"assets/img/image-20241015175228796.2a21a081.png",v=e.p+"assets/img/image-20241015175552758.a21eb70e.png",C=e.p+"assets/img/image-20241015181246775.9b551e60.png",B=e.p+"assets/img/image-20241016100541514.3f55972c.png",z=e.p+"assets/img/image-20241016101547189.9f6e93be.png",P=e.p+"assets/img/image-20241016101816512.e9553b4c.png",E=e.p+"assets/img/image-20241016102001059.9190e91b.png",I=e.p+"assets/img/image-20241016102132437.bf7be77c.png",L=e.p+"assets/img/image-20241016102419500.b09f6eab.png",D=e.p+"assets/img/image-20241016104251033.ed4813f0.png",N=e.p+"assets/img/image-20241016102815162.f5a766f9.png",_=e.p+"assets/img/image-20241016102932892.8a75f618.png",w=e.p+"assets/img/image-20241016103041665.d535eddd.png",K=e.p+"assets/img/image-20241016103749407.8ea0aa3f.png",T=e.p+"assets/img/image-20241016104837996.1fd8775e.png",$=e.p+"assets/img/image-20241016105259945.ad4257b2.png",H=e.p+"assets/img/image-20241016105426595.1a4dba8d.png",O=e.p+"assets/img/image-20241016105758093.2aeadfdd.png",S=e.p+"assets/img/image-20241016104652781.23445430.png",q=e.p+"assets/img/image-20241016105928941.e02e210c.png",R=e.p+"assets/img/image-20241016110548789.5de0a952.png",M=e.p+"assets/img/image-20241016110810676.32a2290c.png",G=e.p+"assets/img/image-20241016110946960.1827ba85.png",J=e.p+"assets/img/image-20241016111317327.5fd25249.png",W=e.p+"assets/img/image-20241016111623184.c8a3267a.png",Z=e.p+"assets/img/image-20241016163136684.75eda604.png",Q=e.p+"assets/img/image-20241016163329958.af4837a5.png",U=e.p+"assets/img/image-20241016163758691.4fb90b61.png",j=e.p+"assets/img/image-20241016164011146.bd11663e.png",X=e.p+"assets/img/image-20241016162529332.65f1057f.png",V=e.p+"assets/img/image-20241016164336132.7844f703.png",Y=e.p+"assets/img/image-20241016164419887.14295c06.png",ii=e.p+"assets/img/image-20241016171227821.305a9176.png",ai=e.p+"assets/img/image-20241016171350655.bea58bd5.png",ei=e.p+"assets/img/image-20241016171547637.ca75a3c4.png",si=e.p+"assets/img/image-20241016135839626.e63bd0cc.png",ti=e.p+"assets/img/image-20241016135945617.19c5cce8.png",li=e.p+"assets/img/image-20241016135958161.09f204db.png",ni=e.p+"assets/img/image-20241016164610264.cae94a4c.png",di=e.p+"assets/img/image-20241016164724027.e6cbdfee.png",gi={},ri=(0,e(1021).A)(gi,[["render",function(i,a){return(0,s.uX)(),(0,s.CE)("div",null,a[0]||(a[0]=[(0,s.Fv)('<h1 id="_05-android基础扫盲与linux命令" tabindex="-1"><a class="header-anchor" href="#_05-android基础扫盲与linux命令"><span>05-Android基础扫盲与Linux命令</span></a></h1><h2 id="android系统架构" tabindex="-1"><a class="header-anchor" href="#android系统架构"><span>Android系统架构</span></a></h2><p>以下这张图片我们从下网上看：</p><img src="'+t+'" alt="image-20241015161300285" style="zoom:80%;"><h3 id="linux内核层" tabindex="-1"><a class="header-anchor" href="#linux内核层"><span>Linux内核层</span></a></h3><p>首先，最底层是Linux Kernel，也就是Linux内核层，由于Android系统是基于Linux内核进行开发的，所以底层上会有一些相似之处。例如常见的各种驱动都是被封装在内核层里面的，后来由于各种厂商要进行定制化，部分厂商会吧驱动放在专门定制的区域。</p><p>而这个shell就在Linux内核层的外面，为用户和内核提供了一个接口，用户使用shell命令去解释，在发送到Linux内核，shell接收到系统的回应做出对应的输出，这就是Linux shell。</p><h3 id="系统运行库层" tabindex="-1"><a class="header-anchor" href="#系统运行库层"><span>系统运行库层</span></a></h3><p>这一层通过一些C/C++库为Android系统提供了主要的特性支持。</p><ol><li>如SQLite库提供了数据库的支持，</li><li>OpenGL|ES库提供了3D绘图的支持，</li><li>Webkit库提供了浏览器内核的支持等。</li></ol><p>在这一层还有Android运行时库，它主要提供了一些核心库，允许开发者使用Java语言来编写Android应用。Android运行时库中还包含了Dalvik虚拟机（5.0系统之后改为ART运行环境），它使每一个Android应用都能运行在独立的进程中，并且拥有一个自己的虚拟机实例。相较于Java虚拟机，Dalvik和ART都是专门为移动设备定制的，它针对手机内存、CPU性能有限等情况做了优化处理。</p><h3 id="应用框架层" tabindex="-1"><a class="header-anchor" href="#应用框架层"><span>应用框架层</span></a></h3><p>构建应用程序时可能用到的各种API，Android自带的一些核心应用就是使用这些API完成的，开发者可以使用这些API来构建自己的应用程序。比如说常见的活动管理、窗口管理、包管理、视图管理等</p><h3 id="应用层" tabindex="-1"><a class="header-anchor" href="#应用层"><span>应用层</span></a></h3><p>所有安装在手机上的应用程序都是属于这一层的，比如系统自带的联系人、短信等程序，或者是你从Google Play上下载的小游戏，当然还包括你自己开发的程序。</p><h2 id="android系统版本" tabindex="-1"><a class="header-anchor" href="#android系统版本"><span>Android系统版本</span></a></h2><p>首先回答三个问题：</p><p>什么是按照系统版本？什么是系统版本代号？什么是API接口？</p><h3 id="android系统版本-1" tabindex="-1"><a class="header-anchor" href="#android系统版本-1"><span>Android系统版本</span></a></h3><p>Android系统版本是指Google开发的Android操作系统的具体发布版本。每个版本通常都会带来新的功能、改进的用户界面、性能提升和安全性更新。Android系统版本通常用数字和点号来表示，例如Android 4.4、Android 5.0、Android 6.0等。</p><img src="'+l+'" alt="image-20241015164009168" style="zoom:80%;"><p>如图，这台手机的Android版本是Android12，相应的下面还有版本号。</p><h3 id="android系统版本代号" tabindex="-1"><a class="header-anchor" href="#android系统版本代号"><span>Android系统版本代号</span></a></h3><p>Android系统版本代号是Google为了便于记忆和区分不同的Android版本而赋予的名称。例如：</p><ul><li>KitKat (Android 4.4)</li><li>Lollipop (Android 5.0 - 5.1.1)</li><li>Marshmallow (Android 6.0 - 6.0.1)</li><li>Nougat (Android 7.0 - 7.1.2)</li><li>Oreo (Android 8.0 - 8.1)</li><li>Pie (Android 9)</li><li>Q (Android 10)</li><li>R (Android 11)</li><li>S (Android 12 - 12L)</li><li>T (Android 13)</li></ul><h3 id="api接口" tabindex="-1"><a class="header-anchor" href="#api接口"><span>API接口</span></a></h3><p>Android API接口是Android平台提供的一系列编程接口，允许开发者访问Android系统的功能和服务。这些API接口定义了如何与Android操作系统进行交互，包括但不限于以下方面：</p><ul><li><strong>界面布局</strong>：用于创建和管理应用程序的用户界面。</li><li><strong>系统服务</strong>：如通知、位置、相机、传感器等系统级服务的访问。</li><li><strong>数据管理</strong>：如文件存储、数据库访问、网络请求等。</li><li><strong>多媒体</strong>：如音频、视频播放和录制。</li></ul><hr><p>下表列出了代号、对应的版本号以及关联的 API 级别。</p><table><thead><tr><th style="text-align:left;">代号</th><th style="text-align:left;">版本</th><th style="text-align:left;">API 级别/NDK 版本</th></tr></thead><tbody><tr><td style="text-align:left;">Android13</td><td style="text-align:left;">13</td><td style="text-align:left;">API 级别 33</td></tr><tr><td style="text-align:left;">Android12L</td><td style="text-align:left;">12</td><td style="text-align:left;">API 级别 32</td></tr><tr><td style="text-align:left;">Android12</td><td style="text-align:left;">12</td><td style="text-align:left;">API 级别 31</td></tr><tr><td style="text-align:left;">Android11</td><td style="text-align:left;">11</td><td style="text-align:left;">API 级别 30</td></tr><tr><td style="text-align:left;">Android10</td><td style="text-align:left;">10</td><td style="text-align:left;">API 级别 29</td></tr><tr><td style="text-align:left;">Pie</td><td style="text-align:left;">9</td><td style="text-align:left;">API 级别 28</td></tr><tr><td style="text-align:left;">Oreo</td><td style="text-align:left;">8.1.0</td><td style="text-align:left;">API 级别 27</td></tr><tr><td style="text-align:left;">Oreo</td><td style="text-align:left;">8.0.0</td><td style="text-align:left;">API 级别 26</td></tr><tr><td style="text-align:left;">Nougat</td><td style="text-align:left;">7.1</td><td style="text-align:left;">API 级别 25</td></tr><tr><td style="text-align:left;">Nougat</td><td style="text-align:left;">7.0</td><td style="text-align:left;">API 级别 24</td></tr><tr><td style="text-align:left;">Marshmallow</td><td style="text-align:left;">6.0</td><td style="text-align:left;">API 级别 23</td></tr><tr><td style="text-align:left;">Lollipop</td><td style="text-align:left;">5.1</td><td style="text-align:left;">API 级别 22</td></tr><tr><td style="text-align:left;">Lollipop</td><td style="text-align:left;">5.0</td><td style="text-align:left;">API 级别 21</td></tr><tr><td style="text-align:left;">KitKat</td><td style="text-align:left;">4.4 - 4.4.4</td><td style="text-align:left;">API 级别 19</td></tr><tr><td style="text-align:left;">Jelly Bean</td><td style="text-align:left;">4.3.x</td><td style="text-align:left;">API 级别 18</td></tr><tr><td style="text-align:left;">Jelly Bean</td><td style="text-align:left;">4.2.x</td><td style="text-align:left;">API 级别 17</td></tr><tr><td style="text-align:left;">Jelly Bean</td><td style="text-align:left;">4.1.x</td><td style="text-align:left;">API 级别 16</td></tr><tr><td style="text-align:left;">Ice Cream Sandwich</td><td style="text-align:left;">4.0.3 - 4.0.4</td><td style="text-align:left;">API 级别 15，NDK 8</td></tr><tr><td style="text-align:left;">Ice Cream Sandwich</td><td style="text-align:left;">4.0.1 - 4.0.2</td><td style="text-align:left;">API 级别 14，NDK 7</td></tr><tr><td style="text-align:left;">Honeycomb</td><td style="text-align:left;">3.2.x</td><td style="text-align:left;">API 级别 13</td></tr><tr><td style="text-align:left;">Honeycomb</td><td style="text-align:left;">3.1</td><td style="text-align:left;">API 级别 12，NDK 6</td></tr><tr><td style="text-align:left;">Honeycomb</td><td style="text-align:left;">3.0</td><td style="text-align:left;">API 级别 11</td></tr><tr><td style="text-align:left;">Gingerbread</td><td style="text-align:left;">2.3.3 - 2.3.7</td><td style="text-align:left;">API 级别 10</td></tr><tr><td style="text-align:left;">Gingerbread</td><td style="text-align:left;">2.3 - 2.3.2</td><td style="text-align:left;">API 级别 9，NDK 5</td></tr><tr><td style="text-align:left;">Froyo</td><td style="text-align:left;">2.2.x</td><td style="text-align:left;">API 级别 8，NDK 4</td></tr><tr><td style="text-align:left;">Eclair</td><td style="text-align:left;">2.1</td><td style="text-align:left;">API 级别 7，NDK 3</td></tr><tr><td style="text-align:left;">Eclair</td><td style="text-align:left;">2.0.1</td><td style="text-align:left;">API 级别 6</td></tr><tr><td style="text-align:left;">Eclair</td><td style="text-align:left;">2.0</td><td style="text-align:left;">API 级别 5</td></tr><tr><td style="text-align:left;">Donut</td><td style="text-align:left;">1.6</td><td style="text-align:left;">API 级别 4，NDK 2</td></tr><tr><td style="text-align:left;">Cupcake</td><td style="text-align:left;">1.5</td><td style="text-align:left;">API 级别 3，NDK 1</td></tr><tr><td style="text-align:left;">（无代号）</td><td style="text-align:left;">1.1</td><td style="text-align:left;">API 级别 2</td></tr><tr><td style="text-align:left;">（无代号）</td><td style="text-align:left;">1.0</td><td style="text-align:left;">API 级别 1</td></tr></tbody></table><h2 id="linux命令" tabindex="-1"><a class="header-anchor" href="#linux命令"><span>Linux命令</span></a></h2><h3 id="认识命令提示符号" tabindex="-1"><a class="header-anchor" href="#认识命令提示符号"><span>认识命令提示符号</span></a></h3><p>当我们进入Android shell之后，我们会看到如下提示符号：</p><figure><img src="'+n+'" alt="image-20241015164852079" tabindex="0" loading="lazy"><figcaption>image-20241015164852079</figcaption></figure><p>这就是命令提示符号，是可以进行自定义的。这个<code>redroid_arm64</code>指的就是Android设备的名称，<code>:</code>就是一个分隔符号；<code>/</code>指的是目录路径；<code>$</code>符号指的是权限符号，如果你处于超级用户权限中，显示的符号就是<code>#</code>。</p><h3 id="根目录" tabindex="-1"><a class="header-anchor" href="#根目录"><span>根目录</span></a></h3><p>根目录就是<code>/</code>，只要看到<code>/</code>那么都表示你处于根目录中，如果是<code>~</code>符号，那么表明你在用户目录中。其他的目录都是挂载到根目录下的，<code>/</code>和<code>~</code>开始的路径都是绝对路径。</p><h3 id="相对路径与绝对路径" tabindex="-1"><a class="header-anchor" href="#相对路径与绝对路径"><span>相对路径与绝对路径</span></a></h3><h4 id="pwd" tabindex="-1"><a class="header-anchor" href="#pwd"><span>pwd</span></a></h4><p>什么是绝对路径？使用pwd命令即可查看当前目录的绝对路径</p><figure><img src="'+d+'" alt="image-20241015165641219" tabindex="0" loading="lazy"><figcaption>image-20241015165641219</figcaption></figure><p>以上图片表示我处于根目录中，再来：</p><figure><img src="'+g+'" alt="image-20241015165724457" tabindex="0" loading="lazy"><figcaption>image-20241015165724457</figcaption></figure><p>以上图片表示我正处于sdcard目录中，这个目录中存放这用户的基础文件。</p><p>我们说绝对路径是<code>/</code>符号，那么相对路径是什么呢？如下图：</p><figure><img src="'+r+'" alt="image-20241015170327112" tabindex="0" loading="lazy"><figcaption>image-20241015170327112</figcaption></figure><p>相对路径就是你跑到了你隔壁的目录或者是隔壁隔壁的目录。这样跳转走的路就是绝对路径；当你下班直接走到对应的目录，那么这个路径就是绝对路径。相对路径的符号一般是<code>./</code>和<code>../</code>。</p><p><code>./</code>表示当前目录，<code>../</code>表示上一级目录，相对路径的常用情况在目录切换和写代码的时候指定文件的路径。</p><h3 id="目录切换" tabindex="-1"><a class="header-anchor" href="#目录切换"><span>目录切换</span></a></h3><h4 id="cd" tabindex="-1"><a class="header-anchor" href="#cd"><span>cd</span></a></h4><p>使用cd命令实现路径的切换，例如：</p><figure><img src="'+p+'" alt="image-20241015170941895" tabindex="0" loading="lazy"><figcaption>image-20241015170941895</figcaption></figure><p>我们如果要切换到上一级目录直接使用如下命令：</p><figure><img src="'+h+'" alt="image-20241015171048885" tabindex="0" loading="lazy"><figcaption>image-20241015171048885</figcaption></figure><p>当然如果你所处的目录很深，你可以使用多个<code>../</code>来进行返回上一级目录，但是我们一般使用绝对路径去跳转比较深的目录，相邻的目录我们会使用<code>./</code>和<code>../</code>快速切换，例如：</p><p>从根目录切换到/storage/emulated/0/NP目录下：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redroid_arm64:/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /storage/emulated/0/NP/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redroid_arm64:/storage/emulated/0/NP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">pwd</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/storage/emulated/0/NP</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redroid_arm64:/storage/emulated/0/NP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看上一级目录有哪些目录，并且任意切换到一个目录中：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redroid_arm64:/storage/emulated/0/NP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ../</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redroid_arm64:/storage/emulated/0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ls</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Alarms</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   Audiobooks</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Documents</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  MT2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     Music</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Notifications</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Podcasts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    Ringtones</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Android</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  DCIM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        Download</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   Movies</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  NP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     Pictures</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       Recordings</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  share</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redroid_arm64:/storage/emulated/0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./Download/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redroid_arm64:/storage/emulated/0/Download</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">pwd</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/storage/emulated/0/Download</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向上返回三层目录：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ../../../</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="一切皆是文件" tabindex="-1"><a class="header-anchor" href="#一切皆是文件"><span>一切皆是文件</span></a></h3><p>在Linux系统中，Linux一切皆是文件，硬件、文件、命令等都可以算是文件。Linux的我呢间默认是没有拓展名的，我们一般是人为的去添加后缀名，方便识别。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">无后缀名：</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">有后缀名：</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.php</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.txt</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.backup</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件类型查看" tabindex="-1"><a class="header-anchor" href="#文件类型查看"><span>文件类型查看</span></a></h3><h4 id="file" tabindex="-1"><a class="header-anchor" href="#file"><span>file</span></a></h4><p>使用file命令可以查看文件的类型和参数</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redroid_arm64:/system/bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ls:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> symbolic</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> toybox</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redroid_arm64:/system/bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cd</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cannot</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> open:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> No</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> such</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> or</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> directory</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redroid_arm64:/system/bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pwd</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">pwd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> symbolic</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> toybox</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redroid_arm64:/system/bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> directory</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+c+'" alt="image-20241015172819632" tabindex="0" loading="lazy"><figcaption>image-20241015172819632</figcaption></figure><p>这个命令非常重要，他可以识别合成的文件，去检查文件是否沾染恶意代码。</p><p>查看当前目录下的所有类型：</p><figure><img src="'+o+'" alt="image-20241015173103872" tabindex="0" loading="lazy"><figcaption>image-20241015173103872</figcaption></figure><h3 id="查看目录文件" tabindex="-1"><a class="header-anchor" href="#查看目录文件"><span>查看目录文件</span></a></h3><h4 id="ls" tabindex="-1"><a class="header-anchor" href="#ls"><span>ls</span></a></h4><p>使用ls命令就可以查看当前目录下面的文件，例如：</p><figure><img src="'+k+'" alt="image-20241015171910618" tabindex="0" loading="lazy"><figcaption>image-20241015171910618</figcaption></figure><p>使用参数可以查看更多的信息，以下是常见的用法：</p><figure><img src="'+m+'" alt="image-20241015173548381" tabindex="0" loading="lazy"><figcaption>image-20241015173548381</figcaption></figure><p>可以看见<code>ls -l</code>不简单是以列表的形式展现文件目录，而是以列表的形式展示文件相关信息。</p><p>例如文件权限、文件大小、文件创建时间、文件所属用户等信息。</p><figure><img src="'+f+'" alt="image-20241015173820239" tabindex="0" loading="lazy"><figcaption>image-20241015173820239</figcaption></figure><p><code>ls -h</code>可以当前显示文件目录的大小。</p><h4 id="命令选项组合" tabindex="-1"><a class="header-anchor" href="#命令选项组合"><span>命令选项组合</span></a></h4><p>我们还可以吧参数合并起来使用达到更好的效果：</p><figure><img src="'+u+'" alt="image-20241015173957378" tabindex="0" loading="lazy"><figcaption>image-20241015173957378</figcaption></figure><p>还可以使用简写的方式，<code>ls -alh</code></p><figure><img src="'+y+'" alt="image-20241015174055024" tabindex="0" loading="lazy"><figcaption>image-20241015174055024</figcaption></figure><p><strong>注意：命令的选项和参数是区分大小写的！！！</strong></p><h3 id="打印文件内容" tabindex="-1"><a class="header-anchor" href="#打印文件内容"><span>打印文件内容</span></a></h3><h4 id="cat" tabindex="-1"><a class="header-anchor" href="#cat"><span>cat</span></a></h4><p>使用cat命令可以查看文件的详细内容：</p><figure><img src="'+A+'" alt="image-20241015174351641" tabindex="0" loading="lazy"><figcaption>image-20241015174351641</figcaption></figure><h3 id="输出文本信息" tabindex="-1"><a class="header-anchor" href="#输出文本信息"><span>输出文本信息</span></a></h3><h4 id="echo" tabindex="-1"><a class="header-anchor" href="#echo"><span>echo</span></a></h4><p>我们可以受用echo命令在命令行中打印我们需要输出表达的信息，例如：</p><figure><img src="'+b+'" alt="image-20241015174624555" tabindex="0" loading="lazy"><figcaption>image-20241015174624555</figcaption></figure><p>我们还可以通过echo命令来输出主机名字：</p><figure><img src="'+x+'" alt="image-20241015174809433" tabindex="0" loading="lazy"><figcaption>image-20241015174809433</figcaption></figure><p><code>$HOSTNAME</code>表示的意思是变量，这个变量里面存储着主机名字的信息，我们通过echo可以将其打印出来查看，还可以打印环境变量等变量，变量这个内容涉及到shell编程，在Linux中使用更为广泛，我们在Android里面最多就是做一个调试。</p><p>写入数据到文件，例如：</p><figure><img src="'+F+'" alt="image-20241015175228796" tabindex="0" loading="lazy"><figcaption>image-20241015175228796</figcaption></figure><h3 id="输入输出重定向" tabindex="-1"><a class="header-anchor" href="#输入输出重定向"><span>输入输出重定向</span></a></h3><h4 id="输出重定向" tabindex="-1"><a class="header-anchor" href="#输出重定向"><span>输出重定向</span></a></h4><p><code>&gt;</code>符号表示重定向中的覆盖文件的意思，<code>&gt;&gt;</code>表示把字符串追加到文件末尾，例如：</p><figure><img src="'+v+'" alt="image-20241015175552758" tabindex="0" loading="lazy"><figcaption>image-20241015175552758</figcaption></figure><p>注意：输出重定向是已经接收了用户的输入，不会将文件的信息打印出来。重定向命令列表如下：</p><table><thead><tr><th>n &gt; file</th><th>将文件描述符为 n 的文件重定向到 file。</th></tr></thead><tbody><tr><td>n &gt;&gt; file</td><td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td>n &gt;&amp; m</td><td>将输出文件 m 和 n 合并。</td></tr></tbody></table><h4 id="输入重定向" tabindex="-1"><a class="header-anchor" href="#输入重定向"><span>输入重定向</span></a></h4><p>注意：区别输出重定向，这个相反，这里输入重定向不是接受用户的输入，而是从文件里面进行读取内容。</p><p><code>&lt;</code>用于文件读取输出，<code>&lt;&lt;</code>用于从命令行提供多行文本信息，<code>&lt;&lt;&lt;</code>用于从命令行提供单行文本信息。</p><p>例如：</p><figure><img src="'+C+'" alt="image-20241015181246775" tabindex="0" loading="lazy"><figcaption>image-20241015181246775</figcaption></figure><h5 id="here-document" tabindex="-1"><a class="header-anchor" href="#here-document"><span>Here Document</span></a></h5><p><code>Here Document</code>是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。</p><p>它的基本的形式如下：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">delimiter</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    document</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">delimiter</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</li><li>开始的delimiter前后的空格会被忽略掉。</li></ul><p>例如：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redroid_arm64:/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EOF</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&gt; Welcaome to China</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&gt; Hello World!</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&gt; EOF</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Welcaome to China</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Hello World!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+B+'" alt="image-20241016100541514" tabindex="0" loading="lazy"><figcaption>image-20241016100541514</figcaption></figure><h5 id="here-string" tabindex="-1"><a class="header-anchor" href="#here-string"><span>Here String</span></a></h5><p><code>&lt;&lt;&lt;</code>用于从命令行提供单行文本信息。这个<code>&lt;&lt;&lt;</code>就是Here String的用法。</p><p><strong>由于Android shell中没有bash</strong>，所以无法使用 <code>&lt;&lt;&lt;</code> 来传递字符串到命令的标准输入只能使用以下方式来进行替代：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;This is a single line of text.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EOF</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EOF</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">或者</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;This is a single line of text.&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建"><span>创建</span></a></h3><h4 id="touch" tabindex="-1"><a class="header-anchor" href="#touch"><span>touch</span></a></h4><p>touch用于进行创建空文件和更新文件，例如：</p><figure><img src="'+z+'" alt="image-20241016101547189" tabindex="0" loading="lazy"><figcaption>image-20241016101547189</figcaption></figure><p>同时创建多个文件</p><figure><img src="'+P+'" alt="image-20241016101816512" tabindex="0" loading="lazy"><figcaption>image-20241016101816512</figcaption></figure><h4 id="mkdir" tabindex="-1"><a class="header-anchor" href="#mkdir"><span>mkdir</span></a></h4><p>mkdir命令可以创建目录，例如：</p><figure><img src="'+E+'" alt="image-20241016102001059" tabindex="0" loading="lazy"><figcaption>image-20241016102001059</figcaption></figure><p>还可以同时创建多个目录，例如：</p><figure><img src="'+I+'" alt="image-20241016102132437" tabindex="0" loading="lazy"><figcaption>image-20241016102132437</figcaption></figure><p>还可以递归创建子目录，例如：</p><figure><img src="'+L+'" alt="image-20241016102419500" tabindex="0" loading="lazy"><figcaption>image-20241016102419500</figcaption></figure><p>我们通过使用-p选项，实现目录的多级递归创建，这样就能实现创建具体层级的目录。</p><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><h4 id="rmdir" tabindex="-1"><a class="header-anchor" href="#rmdir"><span>rmdir</span></a></h4><p>rmdir命令只能删除空目录，例如：</p><figure><img src="'+D+'" alt="image-20241016104251033" tabindex="0" loading="lazy"><figcaption>image-20241016104251033</figcaption></figure><h4 id="rm" tabindex="-1"><a class="header-anchor" href="#rm"><span>rm</span></a></h4><p>使用rm命令可以实现对文件的删除，rm命令不仅能删除文件，还能删除目录例如：</p><figure><img src="'+N+'" alt="image-20241016102815162" tabindex="0" loading="lazy"><figcaption>image-20241016102815162</figcaption></figure><p>还可以实现多个文件同时删除，例如：</p><figure><img src="'+_+'" alt="image-20241016102932892" tabindex="0" loading="lazy"><figcaption>image-20241016102932892</figcaption></figure><p>可以通过-f选项实现文件强制删除，例如：</p><figure><img src="'+w+'" alt="image-20241016103041665" tabindex="0" loading="lazy"><figcaption>image-20241016103041665</figcaption></figure><p>rm还可以实现整个目录的递归删除。例如：</p><figure><img src="'+K+'" alt="image-20241016103749407" tabindex="0" loading="lazy"><figcaption>image-20241016103749407</figcaption></figure><p>当-r和-f的参数同时使用的时候，在删除多级目录和多文件的情况下，可以跳过询问，直接进行删除，一般需要root授权</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -rf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 目录名字</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="复制" tabindex="-1"><a class="header-anchor" href="#复制"><span>复制</span></a></h3><h4 id="cp" tabindex="-1"><a class="header-anchor" href="#cp"><span>cp</span></a></h4><p>cp命令可以实现对目录文件的复制操作，并且重命名，例如：</p><figure><img src="'+T+'" alt="image-20241016104837996" tabindex="0" loading="lazy"><figcaption>image-20241016104837996</figcaption></figure><p>如果不想重命名，直接末尾就不需要新的文件名，但是不能在统一目录下，因为不能出现同名文件，例如：</p><figure><img src="'+$+'" alt="image-20241016105259945" tabindex="0" loading="lazy"><figcaption>image-20241016105259945</figcaption></figure><p>复制多个文件到其他目录，例如：</p><figure><img src="'+H+'" alt="image-20241016105426595" tabindex="0" loading="lazy"><figcaption>image-20241016105426595</figcaption></figure><p>复制当前目录下所有文件到别的目录，例如：</p><figure><img src="'+O+'" alt="image-20241016105758093" tabindex="0" loading="lazy"><figcaption>image-20241016105758093</figcaption></figure><p>复制整个目录，重命名，并且复制下面的文件，例如：</p><figure><img src="'+S+'" alt="image-20241016104652781" tabindex="0" loading="lazy"><figcaption>image-20241016104652781</figcaption></figure><p>如果不适用-r参数就复制，就会进行报错，比如上面那条命令<code>cp doc1 doc2</code>，这是错误的用法。注意如果当前目录下有目录存在，如果逆向复制所有文件目录到当前目录下面的一个目录这个做法是不可取的，只能复制到其他目录。如下图：</p><figure><img src="'+q+'" alt="image-20241016105928941" tabindex="0" loading="lazy"><figcaption>image-20241016105928941</figcaption></figure><p>在复制的过程中，其他目录下出现同名目录是可取的：</p><figure><img src="'+R+'" alt="image-20241016110548789" tabindex="0" loading="lazy"><figcaption>image-20241016110548789</figcaption></figure><h3 id="移动" tabindex="-1"><a class="header-anchor" href="#移动"><span>移动</span></a></h3><h4 id="mv" tabindex="-1"><a class="header-anchor" href="#mv"><span>mv</span></a></h4><p>mv命令可以移动文件目录和重命名文件目录，不仅能在移动过程中命名，并且能在不移动文件的情况下重命名，例如：</p><figure><img src="'+M+'" alt="image-20241016110810676" tabindex="0" loading="lazy"><figcaption>image-20241016110810676</figcaption></figure><figure><img src="'+G+'" alt="image-20241016110946960" tabindex="0" loading="lazy"><figcaption>image-20241016110946960</figcaption></figure><p>我们可以通过mv命令移动文件或者目录，例如：</p><figure><img src="'+J+'" alt="image-20241016111317327" tabindex="0" loading="lazy"><figcaption>image-20241016111317327</figcaption></figure><p>还可以移动之后重命名文件目录，例如：</p><figure><img src="'+W+'" alt="image-20241016111623184" tabindex="0" loading="lazy"><figcaption>image-20241016111623184</figcaption></figure><h3 id="管道" tabindex="-1"><a class="header-anchor" href="#管道"><span>管道</span></a></h3><h4 id="grep" tabindex="-1"><a class="header-anchor" href="#grep"><span>grep</span></a></h4><p>grep命令，用于过滤一些信息，可以快速查找我们需要的信息，例如：</p><figure><img src="'+Z+'" alt="image-20241016163136684" tabindex="0" loading="lazy"><figcaption>image-20241016163136684</figcaption></figure><p>在命令的末尾添加<code>./*</code>表示当前目录去寻找所有的文件目录，里面包含这个字符信息的文件，并显示文件中的文本信息。</p><figure><img src="'+Q+'" alt="image-20241016163329958" tabindex="0" loading="lazy"><figcaption>image-20241016163329958</figcaption></figure><p>如果为我们要忽略字母的大小写进行查找呢？只需要在命令后面添加参数-i即可，如图</p><figure><img src="'+U+'" alt="image-20241016163758691" tabindex="0" loading="lazy"><figcaption>image-20241016163758691</figcaption></figure><p>如果我们要递归查找怎么办呢？只需要在面命令后面添加参数-r即可，例如：</p><figure><img src="'+j+'" alt="image-20241016164011146" tabindex="0" loading="lazy"><figcaption>image-20241016164011146</figcaption></figure><p>如果我们要找对应的文件，那么直接在选项中添加-l即可，过滤文件的操作如下：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -irl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -irl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tiangesec</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+X+'" alt="image-20241016162529332" tabindex="0" loading="lazy"><figcaption>image-20241016162529332</figcaption></figure><p>可以看见我们使用grep过滤出来了文件，并且给出了路径就在当前目录下面，如果想要搜索指定的目录，只需要在搜索信息的寿面添加目录即可，例如：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ril</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Hello</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里表示的就是在当前目录下面进行过滤。</p><p>管道的命令常常用于信息的过滤，我们还可以利用这个特性进行组合，利用管道来实现。</p><h4 id="" tabindex="-1"><a class="header-anchor" href="#"><span>|</span></a></h4><p>这个是竖线<code>|</code>，不是大写的英文字母I，也不是小写的英文字母l，管道符号就是<code>|</code>，可以和命令搭配只用，实现不同的效果。使用<code>|</code>符号可以把后面的命令作为数据源传给前面的命令，以此来进行输出值。</p><p>例如：列出hello的文件详细信息。</p><figure><img src="'+V+'" alt="image-20241016164336132" tabindex="0" loading="lazy"><figcaption>image-20241016164336132</figcaption></figure><p>还可以与进程查看共同使用，例如：</p><figure><img src="'+Y+'" alt="image-20241016164419887" tabindex="0" loading="lazy"><figcaption>image-20241016164419887</figcaption></figure><p>我们通过过滤qq这个名字，来找到相关的进程。</p><h3 id="文件查找" tabindex="-1"><a class="header-anchor" href="#文件查找"><span>文件查找</span></a></h3><h4 id="find" tabindex="-1"><a class="header-anchor" href="#find"><span>find</span></a></h4><p>find命令用于查找文件，语法：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PATH</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filename</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+ii+'" alt="image-20241016171227821" tabindex="0" loading="lazy"><figcaption>image-20241016171227821</figcaption></figure><p>指定对应的路径去寻找文件，例如：</p><figure><img src="'+ai+'" alt="image-20241016171350655" tabindex="0" loading="lazy"><figcaption>image-20241016171350655</figcaption></figure><figure><img src="'+ei+'" alt="image-20241016171547637" tabindex="0" loading="lazy"><figcaption>image-20241016171547637</figcaption></figure><p>他会自动的递归的去寻找文件。注意，路径在前，选项和参数在后面。</p><h3 id="历史命令与清屏" tabindex="-1"><a class="header-anchor" href="#历史命令与清屏"><span>历史命令与清屏</span></a></h3><h4 id="history" tabindex="-1"><a class="header-anchor" href="#history"><span>history</span></a></h4><p>我们可以使用history命令来查看自己已经使用过的命令，例如：</p><figure><img src="'+si+'" alt="image-20241016135839626" tabindex="0" loading="lazy"><figcaption>image-20241016135839626</figcaption></figure><p>在Linux Bash中可以使用选项，但是在这个Android sh中是无法使用未被定义的选项的，只能使用history。</p><h4 id="clear" tabindex="-1"><a class="header-anchor" href="#clear"><span>clear</span></a></h4><p>使用clear命令之后会清除当前命令行的的所有文本信息，如图：</p><figure><img src="'+ti+'" alt="image-20241016135945617" tabindex="0" loading="lazy"><figcaption>image-20241016135945617</figcaption></figure><p>结果如下：</p><figure><img src="'+li+'" alt="image-20241016135958161" tabindex="0" loading="lazy"><figcaption>image-20241016135958161</figcaption></figure><h3 id="进程查看" tabindex="-1"><a class="header-anchor" href="#进程查看"><span>进程查看</span></a></h3><h4 id="ps" tabindex="-1"><a class="header-anchor" href="#ps"><span>ps</span></a></h4><p>ps命令可以用来查看当前Android系统正在运行的服务和软件，例如：</p><figure><img src="'+ni+'" alt="image-20241016164610264" tabindex="0" loading="lazy"><figcaption>image-20241016164610264</figcaption></figure><p>但是我们必须跟上选项-A才能查看全部的进程，因为默认的ps只能看到当前的shell和命令进程，例如：</p><figure><img src="'+di+'" alt="image-20241016164724027" tabindex="0" loading="lazy"><figcaption>image-20241016164724027</figcaption></figure>',229)]))}]]),pi=JSON.parse('{"path":"/AndroidReverse/01-Android%E5%9F%BA%E7%A1%80/05-%E5%B8%B8%E7%94%A8%E7%9A%84Linux%E5%91%BD%E4%BB%A4.html","title":"05-Android基础扫盲与Linux命令","lang":"zh-CN","frontmatter":{"icon":"/assets/icon/android.svg","category":["Android逆向"],"contributors":true,"lastUpdated":true,"pageview":true,"isOriginal":true,"description":"05-Android基础扫盲与Linux命令 Android系统架构 以下这张图片我们从下网上看： image-20241015161300285 Linux内核层 首先，最底层是Linux Kernel，也就是Linux内核层，由于Android系统是基于Linux内核进行开发的，所以底层上会有一些相似之处。例如常见的各种驱动都是被封装在内核层里面的...","head":[["meta",{"property":"og:url","content":"https://xxx252525.github.io/AndroidReverse/01-Android%E5%9F%BA%E7%A1%80/05-%E5%B8%B8%E7%94%A8%E7%9A%84Linux%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"天阁创客的三味书屋"}],["meta",{"property":"og:title","content":"05-Android基础扫盲与Linux命令"}],["meta",{"property":"og:description","content":"05-Android基础扫盲与Linux命令 Android系统架构 以下这张图片我们从下网上看： image-20241015161300285 Linux内核层 首先，最底层是Linux Kernel，也就是Linux内核层，由于Android系统是基于Linux内核进行开发的，所以底层上会有一些相似之处。例如常见的各种驱动都是被封装在内核层里面的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-15T05:06:19.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-15T05:06:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"05-Android基础扫盲与Linux命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-15T05:06:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"天阁创客official\\",\\"url\\":\\"https://tiangesec.org.cn\\",\\"email\\":\\"tiangesec@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"Android系统架构","slug":"android系统架构","link":"#android系统架构","children":[{"level":3,"title":"Linux内核层","slug":"linux内核层","link":"#linux内核层","children":[]},{"level":3,"title":"系统运行库层","slug":"系统运行库层","link":"#系统运行库层","children":[]},{"level":3,"title":"应用框架层","slug":"应用框架层","link":"#应用框架层","children":[]},{"level":3,"title":"应用层","slug":"应用层","link":"#应用层","children":[]}]},{"level":2,"title":"Android系统版本","slug":"android系统版本","link":"#android系统版本","children":[{"level":3,"title":"Android系统版本","slug":"android系统版本-1","link":"#android系统版本-1","children":[]},{"level":3,"title":"Android系统版本代号","slug":"android系统版本代号","link":"#android系统版本代号","children":[]},{"level":3,"title":"API接口","slug":"api接口","link":"#api接口","children":[]}]},{"level":2,"title":"Linux命令","slug":"linux命令","link":"#linux命令","children":[{"level":3,"title":"认识命令提示符号","slug":"认识命令提示符号","link":"#认识命令提示符号","children":[]},{"level":3,"title":"根目录","slug":"根目录","link":"#根目录","children":[]},{"level":3,"title":"相对路径与绝对路径","slug":"相对路径与绝对路径","link":"#相对路径与绝对路径","children":[]},{"level":3,"title":"目录切换","slug":"目录切换","link":"#目录切换","children":[]},{"level":3,"title":"一切皆是文件","slug":"一切皆是文件","link":"#一切皆是文件","children":[]},{"level":3,"title":"文件类型查看","slug":"文件类型查看","link":"#文件类型查看","children":[]},{"level":3,"title":"查看目录文件","slug":"查看目录文件","link":"#查看目录文件","children":[]},{"level":3,"title":"打印文件内容","slug":"打印文件内容","link":"#打印文件内容","children":[]},{"level":3,"title":"输出文本信息","slug":"输出文本信息","link":"#输出文本信息","children":[]},{"level":3,"title":"输入输出重定向","slug":"输入输出重定向","link":"#输入输出重定向","children":[]},{"level":3,"title":"创建","slug":"创建","link":"#创建","children":[]},{"level":3,"title":"删除","slug":"删除","link":"#删除","children":[]},{"level":3,"title":"复制","slug":"复制","link":"#复制","children":[]},{"level":3,"title":"移动","slug":"移动","link":"#移动","children":[]},{"level":3,"title":"管道","slug":"管道","link":"#管道","children":[]},{"level":3,"title":"文件查找","slug":"文件查找","link":"#文件查找","children":[]},{"level":3,"title":"历史命令与清屏","slug":"历史命令与清屏","link":"#历史命令与清屏","children":[]},{"level":3,"title":"进程查看","slug":"进程查看","link":"#进程查看","children":[]}]}],"git":{"createdTime":1739595979000,"updatedTime":1739595979000,"contributors":[{"name":"xxx252525","username":"xxx252525","email":"1072441436@qq.com","commits":1,"url":"https://github.com/xxx252525"}]},"readingTime":{"minutes":16.99,"words":5097},"filePathRelative":"AndroidReverse/01-Android基础/05-常用的Linux命令.md","localizedDate":"2025年2月15日","autoDesc":true}')}}]);
"use strict";(self.webpackChunkxxx252525_github_io=self.webpackChunkxxx252525_github_io||[]).push([[2157],{1021:(i,e)=>{e.A=(i,e)=>{const t=i.__vccOpts||i;for(const[i,a]of e)t[i]=a;return t}},1148:(i,e,t)=>{t.r(e),t.d(e,{comp:()=>O,data:()=>R});var a=t(6254);const l=t.p+"assets/img/image-20250215142425916.793287ae.png",s=t.p+"assets/img/image-20250215142357600.9f1d13d4.png",n=t.p+"assets/img/image-20250215145446653.7fbbe56c.png",d=t.p+"assets/img/image-20250215145502813.11a84e98.png",r=t.p+"assets/img/image-20250215145939926.eccde0f1.png",g=t.p+"assets/img/image-20250215150838446.35c9280d.png",p=t.p+"assets/img/image-20250215175514935.283bf2fe.png",h=t.p+"assets/img/image-20250215204125701.60613d23.png",o=t.p+"assets/img/image-20250215204311487.2034c375.png",c=t.p+"assets/img/image-20250215204416818.557d3e3e.png",m=t.p+"assets/img/image-20250215204503628.b6c91c6c.png",u=t.p+"assets/img/image-20250215204613629.c15061fd.png",f=t.p+"assets/img/image-20250216165356706.0266e27a.png",k=t.p+"assets/img/image-20250217140054948.b10fc579.png",b=t.p+"assets/img/image-20250216171530740.06086d50.png",x=t.p+"assets/img/image-20250215181242570.42183ea6.png",y=t.p+"assets/img/image-20250215180721719.f9a2d92b.png",v=t.p+"assets/img/image-20250215181003847.5fcf42f9.png",A=t.p+"assets/img/image-20250215202354694.528fef05.png",F=t.p+"assets/img/image-20250215203756343.0dc62e21.png",S=t.p+"assets/img/image-20250215203440200.6462242a.png",z=t.p+"assets/img/image-20250216172544637.e925389f.png",L=t.p+"assets/img/image-20250216174849965.206a8b82.png",B=t.p+"assets/img/image-20250216173841722.d1830283.png",_=t.p+"assets/img/image-20250216175052656.fc592a8b.png",C=t.p+"assets/img/image-20250216175302614.71efd0eb.png",E=t.p+"assets/img/image-20250217132040198.69a0a06f.png",P=t.p+"assets/img/image-20250217132922318.370db187.png",T=t.p+"assets/img/image-20250217133048261.4f574121.png",w=t.p+"assets/img/image-20250217133340187.6ca49fd5.png",H=t.p+"assets/img/image-20250217133544133.c2282787.png",q=t.p+"assets/img/image-20250217133937649.b4f5f9b6.png",Z=t.p+"assets/img/PixPin_2025-02-17_13-42-02.1b6c1072.gif",I=t.p+"assets/img/PixPin_2025-02-17_13-48-03.b60c4a96.gif",D=t.p+"assets/img/image-20250217135131902.dd0d0b8b.png",N=t.p+"assets/img/image-20250217140700530.9e8b6e8c.png",V=t.p+"assets/img/PixPin_2025-02-17_14-07-53.7094f411.gif",$={},O=(0,t(1021).A)($,[["render",function(i,e){return(0,a.uX)(),(0,a.CE)("div",null,e[0]||(e[0]=[(0,a.Fv)('<h1 id="_03-走进shell" tabindex="-1"><a class="header-anchor" href="#_03-走进shell"><span>03-走进Shell</span></a></h1><h2 id="认识shell" tabindex="-1"><a class="header-anchor" href="#认识shell"><span>认识Shell</span></a></h2><p>首先我们必须理解什么是Linux Shell？怎么去使用Linux Shell？</p><p>Linux Shell 是一种命令行界面（CLI），它允许用户通过输入一系列命令与操作系统进行交互。Shell是一个脚本解释器，用户可以在其中编写和执行脚本来实现一系列的操作，包括文件操作、网络操作、系统配置等等。</p><p>而Shell是一种命令语言，同时也是一种程序设计语言。它是用户和Linux沟通的桥梁。Shell也是操作系统中的一个软件，它包含在Linux内核的外面，为用户和内核提供一个交互接口，用shell去进行解释，再发送给Linux内核。</p><p>Shell在计算机中的位置如图：</p><figure><img src="'+l+'" alt="image-20250215142425916" tabindex="0" loading="lazy"><figcaption>image-20250215142425916</figcaption></figure><p><strong>注意：在Windows中，同时存在CMD和Powershell两种命令行语言。</strong></p><p>Shell主要有这些功能：</p><ul><li>解释和执行用户输入的命令</li><li>控制和管理文件和目录</li><li>启动和停止程序和进程</li><li>管理网络连接和配置</li><li>提供安全性和访问控制的功能</li><li>执行脚本和Shell脚本</li><li>提供用户界面和交互的功能</li></ul><figure><img src="'+s+'" alt="image-20250215142357600" tabindex="0" loading="lazy"><figcaption>image-20250215142357600</figcaption></figure><p>Shell对于用户输入的命令，有以下三种处理方式：</p><ul><li>如果用户输入的是内置命令，那么由Shel的内部解释器进行解释，并交由内核执行。</li><li>如果用户输入的是实用程序命令，而且给出了命令的路径，那么Shell会按照用户提供的路径在硬盘中查找。如果找到则调入内存，交由内核执行；否则输出提示信息。</li><li>如果用户输入的是实用程序命令，但是没有给出命令的路径，那么SheIl会根据PATH环境变量所指定的路径依次进行查找。如果找到则调入内存，交由内核执行；否则输出提示信息。</li></ul><p>常见的Shell类型有哪些？</p><ol><li>Bash（Bourne Again SHell）：是大多数Linux发行版中最常用的Shell。</li><li>SH（Bourne SHell）：是最初的Unix Shell，由Steve Bourne开发。</li><li>C Shell（csh）：语法类似于C语言。</li><li>Korn Shell（ksh）：SH的扩展，提供更多功能和更友好的命令行编辑。</li><li>Z Shell（zsh）：是一个为交互使用设计的强大的命令解释器，Kali Linux默认使用的就是Zsh。</li></ol><hr><h2 id="命令提示符" tabindex="-1"><a class="header-anchor" href="#命令提示符"><span>命令提示符</span></a></h2><p>如果你使用的是桌面端，需要这样打开终端，如果是命令行界面就不用。如图：</p><figure><img src="'+n+'" alt="image-20250215145446653" tabindex="0" loading="lazy"><figcaption>image-20250215145446653</figcaption></figure><p>进入之后我们可以看见和命令行界面一样的字符串，如图：</p><figure><img src="'+d+'" alt="image-20250215145502813" tabindex="0" loading="lazy"><figcaption>image-20250215145502813</figcaption></figure><p>看到前面的命令提示符就说明可以输入命令了，注意命令提示符不是命令的一部分，只是一个提示的作用。我们来看看Fedora的命令提示符吧，如图：</p><figure><img src="'+r+'" alt="image-20250215145939926" tabindex="0" loading="lazy"><figcaption>image-20250215145939926</figcaption></figure><p>基于RHEL（红帽）的操作系统都是这样子的提示符风格，其中的含义如下：</p><ul><li><code>miui</code>是用户名</li><li><code>@</code>是分隔符号，没有特殊含义</li><li><code>fedora</code>是当前系统的主机名</li><li><code>：</code>也是分隔符号，没有特殊含义</li><li><code>~</code>代表当前用户所在的住目录（home目录），如果是在其他目录中，那么符号会编程对应目录的名称</li><li><code>$</code>符号是权限符号，如果是root用户，符号会变成#</li></ul><p>大多数Linux系统中默认使用的shell都是Bash shell，如果我们要知道自己使用的是什么shell，我们可以在终端中输入如下命令：</p><figure><img src="'+g+'" alt="image-20250215150838446" tabindex="0" loading="lazy"><figcaption>image-20250215150838446</figcaption></figure><p>可以看见当我们输入<code>echo $SHELL</code>之后，系统返回了一串字符，<code>/bin/bash</code>这表示我们系统当前使用的shell是bash shell。</p><h3 id="shell命令的语法" tabindex="-1"><a class="header-anchor" href="#shell命令的语法"><span>shell命令的语法</span></a></h3><p>shell命令的基本格式如下</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [选项] [参数]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>选项一般是--help或者-h，-H之类的，每一个选项都有对应的功能，并且可以简写，简写规则需要查看对应的帮助，参数就是我们要修改的文件等。</p><p>例如，我们使用对应的命令的时候，在后面添加--help就可以看到使用手册，如图：</p><figure><img src="'+p+'" alt="image-20250215175514935" tabindex="0" loading="lazy"><figcaption>image-20250215175514935</figcaption></figure><h2 id="常见的命令" tabindex="-1"><a class="header-anchor" href="#常见的命令"><span>常见的命令</span></a></h2><p>我们常见的命令有哪些呢？或者是很基础的命令有哪些？</p><p>首先最简单的就是获取当前系统时间和时区。如图：</p><figure><img src="'+h+'" alt="image-20250215204125701" tabindex="0" loading="lazy"><figcaption>image-20250215204125701</figcaption></figure><p>我们使用date命令就可以获取到当前的年月日、星期、点钟、时区。</p><p>我们还可以使用一些其他的命令，比如我们当前命令行所处什么位置？我们使用<code>pwd</code>命令就可以查看当前的工作目录。</p><figure><img src="'+o+'" alt="image-20250215204311487" tabindex="0" loading="lazy"><figcaption>image-20250215204311487</figcaption></figure><p>我们还可以使用<code>hostname</code>来查看当前的主机名，如图：</p><figure><img src="'+c+'" alt="image-20250215204416818" tabindex="0" loading="lazy"><figcaption>image-20250215204416818</figcaption></figure><p>还可以使用<code>ls</code>来查看当前工作目录有那些文件，如图：</p><figure><img src="'+m+'" alt="image-20250215204503628" tabindex="0" loading="lazy"><figcaption>image-20250215204503628</figcaption></figure><p>使用<code>id</code>就可以查看用户的身份信息，如图：</p><figure><img src="'+u+'" alt="image-20250215204613629" tabindex="0" loading="lazy"><figcaption>image-20250215204613629</figcaption></figure><div class="hint-container caution"><p class="hint-container-title">警告</p><p>注意：启用了SELinux的Linux发行版，例如Fedora或者RHEl其他系列的Linux，在id的的输出信息中会显示额外的信息，如上图的“上下文=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023”字符串信息内容，没有启用SELinux安全行的话是没有这串字符信息的。</p></div><p>如何查看我们当前登陆的会话信息呢？我们可以使用<code>who</code>命令来进行查看，我们在后面添加上参数<code>-uH</code>就可以以人类语言的方式来读取，如图：</p><figure><img src="'+f+'" alt="image-20250216165356706" tabindex="0" loading="lazy"><figcaption>image-20250216165356706</figcaption></figure><p>这里的tty是虚拟控制台，也就是我们开启的虚拟终端（当前窗口），第一个是我们使用图形界面才会出现的东西，如果你使用Server命令行界面的时候，就不回出现这个<code>login screen</code>。</p><p>检测网络连接我们可以使用<code>ping</code>命令。语法：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ping</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 网址</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如图：</p><figure><img src="'+k+'" alt="image-20250217140054948" tabindex="0" loading="lazy"><figcaption>image-20250217140054948</figcaption></figure><h3 id="命令存放路径" tabindex="-1"><a class="header-anchor" href="#命令存放路径"><span>命令存放路径</span></a></h3><p>我们命令存放在什么位置的呢？命令也是有区别的，如有shell内置命令、外部命令、别名、函数、shell保留字、特殊命令等多种命令。</p><p>我们可以使用<code>echo $PATH</code>命令来查看Linux用户常见的默认路径。如图：</p><figure><img src="'+b+'" alt="image-20250216171530740" tabindex="0" loading="lazy"><figcaption>image-20250216171530740</figcaption></figure><p>通常情况，大多数用户命令都存储在/bin, /user/bin, /user/local/bin目录中，而/sbin和/user.sbin包含一些系统管理员的一些管理命令，主要用于管理操作系统。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>提示：如果想添加自己编写的命令或者Shell脚本，我们可以把他放在主目录的bin目录中，也可以放在用户的/home/chris/bin目录中。在部分Linux系统中，会自动将目录添加到路径中，这时候就只需要添加PATH(路径)到环境变量中即可。环境变量后续会讲解，这里提示下即可。</p></div><h2 id="超级用户" tabindex="-1"><a class="header-anchor" href="#超级用户"><span>超级用户</span></a></h2><p>在Linux操作系统中，我们除了自己创建的用户，还存在超级用户，超级用户root，这是权限最高的用户，非常危险，需要谨慎使用。</p><p>我们可以使用<code>su</code>和<code>sudo</code>命令来切换用户。</p><h3 id="su" tabindex="-1"><a class="header-anchor" href="#su"><span>su</span></a></h3><p><code>su</code>命令允许一个普通用户切换到另一个用户账户，通常是切换到root账户。</p><p>语法如下：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">su</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [options] [username]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>options</code>是选项，<code>username</code>是用户名，例如：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">su</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          # 切换到root用户，需要输入root密码</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">su</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 以登录shell的方式切换到root用户</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">su</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> username</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 切换到名为username的用户账户</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切换用户的时候需要输入对应用户的密码。</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>在大多数Linux发行版中，安装过程中通常会创建一个普通用户账户，而root账户则会被默认禁用或者没有设置密码。这是出于安全考虑，防止未经授权的用户获得超级用户权限。我们之前安装带桌面的WorkStation的时候就没有设置过root账户，而我们安装Server的时候是手动设置过root账户的密码的，所以这个时候我们要为root账户设置密码。</p></div><p>如果使用su无法切换到root用户，请使用下面的sudo方法进行提权或者修改root密码，再切换到root账户。</p><p>成功切换如图：</p><figure><img src="'+x+'" alt="image-20250215181242570" tabindex="0" loading="lazy"><figcaption>image-20250215181242570</figcaption></figure><h3 id="sudo" tabindex="-1"><a class="header-anchor" href="#sudo"><span>sudo</span></a></h3><p><code>sudo</code>命令允许授权用户以超级用户或其他用户的身份执行命令。与su不同，sudo不需要知道root密码，而是使用用户自己的密码。</p><p>语法如下：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [options] command</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="修改root账户密码" tabindex="-1"><a class="header-anchor" href="#修改root账户密码"><span>修改root账户密码</span></a></h4><p>我们可以利用这一点来设置root账户的密码。方便我们以后切换到root账户获取更高的权限。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> passwd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如图：</p><figure><img src="'+y+'" alt="image-20250215180721719" tabindex="0" loading="lazy"><figcaption>image-20250215180721719</figcaption></figure><div class="hint-container caution"><p class="hint-container-title">警告</p><p>我们前后必须保证密码的一致性，四位数密码也是可以设置的，只是由于安全性考虑我们不得不提升密码的安全性。所以在学习过程中我们可以使用简单的密码，方便记忆，但是在工作中，必须要设置安全系数较高的密码，通常是大小写英文+特殊符号+数字不低于8位数。</p></div><p>密码修改成功如下：</p><figure><img src="'+v+'" alt="image-20250215181003847" tabindex="0" loading="lazy"><figcaption>image-20250215181003847</figcaption></figure><p>然后就可以使用su进行账户切换，如图：</p><figure><img src="'+x+'" alt="image-20250215181242570" tabindex="0" loading="lazy"><figcaption>image-20250215181242570</figcaption></figure><h4 id="sudo模拟root账户" tabindex="-1"><a class="header-anchor" href="#sudo模拟root账户"><span>sudo模拟root账户</span></a></h4><p>sudo主要适用于提权操作，并不能直接切换到root账户，如果要切换到root账户，我们需要使用su命令。</p><p>比如我们要进行某些操作的时候，比如升级软件和依赖之类的，文件读写运行，我们很多时候需要使用root权限来进行操作，这个时候只需要在命令的前面添加上sudo即可。</p><p>还有我们经常使用的<code>sudo -i</code>，可以进入到root环境里面去。</p><figure><img src="'+A+'" alt="image-20250215202354694" tabindex="0" loading="lazy"><figcaption>image-20250215202354694</figcaption></figure><p>可以看见我们进入的是带有root的shell环境中，和su的效果差不多，都能让你用root权限去执行命令，但是本子上还是有很多区别。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>很多人是误以为这是切换到了root账户，其实这不是账户的切换，<strong>而是我们在交互的shell中以超级用户的身份去执行交互式命令，他会尝试去模拟root Shell的行为，你可以理解他开启了一个带有 root 权限的 shell，你本质上还是在当前用户，而不是直接切换到了root用户。</strong></p><p>其次<code>sudo -i</code>加载的是root用户的环境配置，而<code>su</code>不会加载目标用户的环境文件，他只会保留但当前用户环境。你可以看图片中的细节：</p><figure><img src="'+F+'" alt="image-20250215203756343" tabindex="0" loading="lazy"><figcaption>image-20250215203756343</figcaption></figure></div><h3 id="退出root环境" tabindex="-1"><a class="header-anchor" href="#退出root环境"><span>退出root环境</span></a></h3><p>我们如果想要回到原本的用户shell中我们该怎么办呢？</p><p>我们只需要在命令行中输入<code>exit</code>即可退出当前shell环境，包括基础用户环境。如图：</p><figure><img src="'+S+'" alt="image-20250215203440200" tabindex="0" loading="lazy"><figcaption>image-20250215203440200</figcaption></figure><h2 id="命令行编辑" tabindex="-1"><a class="header-anchor" href="#命令行编辑"><span>命令行编辑</span></a></h2><p>我们可以使用Linux中的最强命令行编辑器vim来进行编辑，vim是vi编辑器的升级版，功能性和拓展性更强；和Emacs并列成为类Unix系统用户最喜欢的文本编辑器。</p><img src="'+z+'" alt="image-20250216172544637" style="zoom:67%;"><p>我们如何使用？如何使用vim，首先你要进行安装，如果你在安装系统的时候勾选了开发模块，那么默认你就有vim编辑器，否则默认安装的只有Vi编辑器。</p><figure><img src="'+L+'" alt="image-20250216174849965" tabindex="0" loading="lazy"><figcaption>image-20250216174849965</figcaption></figure><p>当我们想编辑一个文件的时候，只需要在命令行中输入如下命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [filename]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>vim会进入文件中进行编辑，如果当前文件不存在，那么会自动创建一个文件。</p><h3 id="工作模式" tabindex="-1"><a class="header-anchor" href="#工作模式"><span>工作模式</span></a></h3><p>vim编辑器有三种编辑模式，分别是命令模式、编辑模式和末行模式。</p><figure><img src="'+B+'" alt="image-20250216173841722" tabindex="0" loading="lazy"><figcaption>image-20250216173841722</figcaption></figure><h4 id="命令模式" tabindex="-1"><a class="header-anchor" href="#命令模式"><span>命令模式</span></a></h4><p>命令模式是vim启动后的默认模式，在这个模式下可以使用命令来进行操作，比如文本替换、删除、光标移动，但是不能直接输出文本。</p><p>常见的一些操作如下：</p><table><thead><tr><th>按键操作</th><th>功能描述</th></tr></thead><tbody><tr><td>h或←</td><td>向左移动光标</td></tr><tr><td>j或↓</td><td>向下移动光标</td></tr><tr><td>k或↑</td><td>向上移动光标</td></tr><tr><td>l或→</td><td>向右移动光标</td></tr><tr><td>w</td><td>移动到下一个单词的开始</td></tr><tr><td>b</td><td>移动到上一个单词的开始</td></tr><tr><td>e</td><td>移动到下一个单词的结束</td></tr><tr><td>0</td><td>移动到行首</td></tr><tr><td>$</td><td>移动到行尾</td></tr><tr><td>gg</td><td>移动到文件的第一行</td></tr><tr><td>G</td><td>移动到文件的最后一行</td></tr><tr><td>dd</td><td>删除当前行</td></tr><tr><td>dw</td><td>删除当前单词</td></tr><tr><td>d$</td><td>删除光标到行尾的内容</td></tr><tr><td>x</td><td>删除光标下的字符</td></tr><tr><td>p</td><td>粘贴剪切板中的内容</td></tr><tr><td>y</td><td>复制文本</td></tr><tr><td>yy</td><td>复制当前行</td></tr><tr><td>yw</td><td>复制当前单词</td></tr><tr><td>u</td><td>撤销最近的更改</td></tr><tr><td>Ctrl r</td><td>重做最近的撤销</td></tr><tr><td>/search</td><td>向前搜索<code>search</code>字符串</td></tr><tr><td>?search</td><td>向后搜索<code>search</code>字符串</td></tr><tr><td>n</td><td>查找下一个搜索匹配项</td></tr><tr><td>N</td><td>查找上一个搜索匹配项</td></tr></tbody></table><p><strong>注意：如果在某些文本操作的按键前面添加数字，就可以实现多行删除、多行复制。</strong></p><h4 id="插入模式" tabindex="-1"><a class="header-anchor" href="#插入模式"><span>插入模式</span></a></h4><p>在插入模式中我们可以对文件进行编辑，和富文本编辑器一样，直接在文件中任意编写和粘贴内容。要退出插入模式并返回命令模式，可以按Esc键。</p><table><thead><tr><th style="text-align:left;">按键操作</th><th style="text-align:left;">功能描述</th></tr></thead><tbody><tr><td style="text-align:left;">i</td><td style="text-align:left;">在光标位置前插入文本</td></tr><tr><td style="text-align:left;">I</td><td style="text-align:left;">在当前行的行首插入文本</td></tr><tr><td style="text-align:left;">a</td><td style="text-align:left;">在光标位置后插入文本</td></tr><tr><td style="text-align:left;">A</td><td style="text-align:left;">在当前行的行尾插入文本</td></tr><tr><td style="text-align:left;">o</td><td style="text-align:left;">在当前行下方插入新行并进入插入模式</td></tr><tr><td style="text-align:left;">O</td><td style="text-align:left;">在当前行上方插入新行并进入插入模式</td></tr></tbody></table><figure><img src="'+_+'" alt="image-20250216175052656" tabindex="0" loading="lazy"><figcaption>image-20250216175052656</figcaption></figure><h4 id="莫行模式" tabindex="-1"><a class="header-anchor" href="#莫行模式"><span>莫行模式</span></a></h4><p>末行模式也称为冒号模式，在命令模式下按:键可以进入。在这个模式下，您可以执行文件操作、搜索和替换文本、设置Vim选项等。</p><table><thead><tr><th style="text-align:left;">按键操作</th><th style="text-align:left;">功能描述</th></tr></thead><tbody><tr><td style="text-align:left;">:w</td><td style="text-align:left;">保存文件</td></tr><tr><td style="text-align:left;">:q</td><td style="text-align:left;">退出Vim（如果没有更改）</td></tr><tr><td style="text-align:left;">:q!</td><td style="text-align:left;">强制退出Vim，不保存更改</td></tr><tr><td style="text-align:left;">:wq</td><td style="text-align:left;">保存文件并退出</td></tr><tr><td style="text-align:left;">:e filename</td><td style="text-align:left;">打开新文件filename进行编辑</td></tr><tr><td style="text-align:left;">/string</td><td style="text-align:left;">在文件中查询名为string的字符串</td></tr><tr><td style="text-align:left;">?string</td><td style="text-align:left;">在光标之上查询名为string的字符串</td></tr><tr><td style="text-align:left;">n</td><td style="text-align:left;">重复前一个查找动作（向后查找）</td></tr><tr><td style="text-align:left;">N</td><td style="text-align:left;">反向进行前一个查找动作（向前查找）</td></tr><tr><td style="text-align:left;">😒/search/replace</td><td style="text-align:left;">将当前行中的第一个search替换为replace</td></tr><tr><td style="text-align:left;">:%s/search/replace/g</td><td style="text-align:left;">将整个文件中的所有search替换为replace</td></tr><tr><td style="text-align:left;">:set number</td><td style="text-align:left;">显示行号</td></tr><tr><td style="text-align:left;">:set nonumber</td><td style="text-align:left;">不显示行号</td></tr><tr><td style="text-align:left;">:help</td><td style="text-align:left;">打开Vim帮助文档</td></tr></tbody></table><p>这部分内容只有在你编辑文本的时候才会使用到。</p><figure><img src="'+C+'" alt="image-20250216175302614" tabindex="0" loading="lazy"><figcaption>image-20250216175302614</figcaption></figure><h2 id="命令行其他操作" tabindex="-1"><a class="header-anchor" href="#命令行其他操作"><span>命令行其他操作</span></a></h2><h3 id="补全与提示" tabindex="-1"><a class="header-anchor" href="#补全与提示"><span>补全与提示</span></a></h3><p>命令很多，有时候我们没有办法全部记住，这个时候就可以利用命令行补全这个功能，在键盘上，有一个<code>Tab</code>按键，我们在使用命令的时候按住Tab就可以补全和命令提示。</p><p>例如，当我不知道有那些命令的时候，我可以输入几个字符，然后Tab键查看，如图：</p><figure><img src="'+E+'" alt="image-20250217132040198" tabindex="0" loading="lazy"><figcaption>image-20250217132040198</figcaption></figure><blockquote><p>技巧：</p><p>当Tab键只能返回一个内容的时候就会进行自动命令补全，例如当你输入上面的<code>sysc</code>，按住Tab就可以补全成<code>sysctl</code>，当然，我们还可以连续使用Tab来进行操作。</p><p>我们可以直接输入<code>syst</code>，她会自动补全成大家都有的共同字符，比如补全之后就是<code>system</code>，这是所有的命令都包含的特征，后面我们再根据自己想要使用的命令输入字符，比如我输入<code>c</code>，那么最后会直接补全成<code>systemctl</code>。这就是Tab补全技巧。</p></blockquote><h3 id="重复执行" tabindex="-1"><a class="header-anchor" href="#重复执行"><span>重复执行</span></a></h3><p>在Linux操作系统中我们还可以使用命令行重复执行这个操作。我们所有输入的命令都在在shell中进行一个保存，放在历史列表和<code>.bash_history</code>文件中。</p><p>我们可以通过<code>history</code>来查看历史命令。如图：</p><figure><img src="'+P+'" alt="image-20250217132922318" tabindex="0" loading="lazy"><figcaption>image-20250217132922318</figcaption></figure><p>我们还可以通过追加数字的方式查看最近的几条命令，例如：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">history</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个操作是包含当前命令的历史记录的，如图：</p><figure><img src="'+T+'" alt="image-20250217133048261" tabindex="0" loading="lazy"><figcaption>image-20250217133048261</figcaption></figure><p>列表前面有一个编号，这个编号我们可以利用起来，从而实现命令的重复执行。我们可以通过一个感叹号(!)来进行实现。</p><p>我们可以通过编号来执行已经使用过的命令，语法为<code>!n</code>，这个n就是历史命令前面的编号如图：</p><figure><img src="'+w+'" alt="image-20250217133340187" tabindex="0" loading="lazy"><figcaption>image-20250217133340187</figcaption></figure><p>我们还可以使用<code>!!</code>来运行前一个命令，如图：</p><figure><img src="'+H+'" alt="image-20250217133544133" tabindex="0" loading="lazy"><figcaption>image-20250217133544133</figcaption></figure><p>我们还可以使用<code>!?string?</code>的方式来运行包含某些字符串的命令。<code>??</code>里面的内容会自动与Linux中的shell命令进行匹配，找到相对应的命令，如图：</p><figure><img src="'+q+'" alt="image-20250217133937649" tabindex="0" loading="lazy"><figcaption>image-20250217133937649</figcaption></figure><p>我们还可以使用上下按键来浏览历史命令。</p><figure><img src="'+Z+'" alt="PixPin_2025-02-17_13-42-02" tabindex="0" loading="lazy"><figcaption>PixPin_2025-02-17_13-42-02</figcaption></figure><h3 id="多行执行" tabindex="-1"><a class="header-anchor" href="#多行执行"><span>多行执行</span></a></h3><p>我们还可以实现多行命令执行的操作，这种操作一般是利用富文本编辑器的第三方Shell终端来实现，或者是在复制粘贴大量命令的时候来使用。</p><p>多行执行的特点，我们的每一行都是一条命令，并且是可自行没有错误的命令。操作如下：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ls</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">pwd</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">date</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们同时使用这三条命令的时候，shell会依次从上至下依次执行。如图：</p><figure><img src="'+I+'" alt="PixPin_2025-02-17_13-48-03" tabindex="0" loading="lazy"><figcaption>PixPin_2025-02-17_13-48-03</figcaption></figure><p>命令的内容被一次性执行，并且按顺序返回到终端显示。</p><h3 id="连续命令" tabindex="-1"><a class="header-anchor" href="#连续命令"><span>连续命令</span></a></h3><p>连续命令这个操作一般会夹杂这正则表达式使用，什么是正则表达式？这个内容我们在后面讲解环境变量的时候一次性讲解，这知道有这个东西就可以了。</p><p>比如我们要执行多条命令的时候可以通过<code>;</code>的方式进行隔开，这个执行的效果和上面的多行执行效果一样，都是按顺序进行命令执行。</p><p>如下图：</p><figure><img src="'+D+'" alt="image-20250217135131902" tabindex="0" loading="lazy"><figcaption>image-20250217135131902</figcaption></figure><h3 id="后台命令" tabindex="-1"><a class="header-anchor" href="#后台命令"><span>后台命令</span></a></h3><p>一些命令要用很长的时间才能执行，我们有时候不想让他占用我们正在使用的shell，这样会让我们等待时间太长，这时候后台命令的作用就体现出来了。</p><p>这个情况我们可以使用与符号<code>&amp;</code>让命令在后台进行执行。语法如下</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">执行命令</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里以ping命令为例，如果您想在后台执行ping命令来持续监控与一个网站的连接情况，可以这样做：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ping miui.com &amp;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行上述命令后，ping命令会在后台运行，并且您会看到一个作业号和进程ID（PID），如下所示：</p><figure><img src="'+N+'" alt="image-20250217140700530" tabindex="0" loading="lazy"><figcaption>image-20250217140700530</figcaption></figure><p>并且你无法使用使用CTRL+C退出操作，会一直刷屏。这个时候只有通过杀进程的方式退出，我们使用kill来杀死进程。如图：</p><figure><img src="'+V+'" alt="PixPin_2025-02-17_14-07-53" tabindex="0" loading="lazy"><figcaption>PixPin_2025-02-17_14-07-53</figcaption></figure><p>更多操作我们将在后面的进程与后台篇章进行学习。</p>',171)]))}]]),R=JSON.parse('{"path":"/Linux/03%E8%B5%B0%E8%BF%9BShell.html","title":"03-走进Shell","lang":"zh-CN","frontmatter":{"icon":"/assets/icon/linux.svg","category":["运维基础"],"contributors":true,"lastUpdated":true,"pageview":true,"isOriginal":true,"date":"2023-02-17T00:00:00.000Z","description":"03-走进Shell 认识Shell 首先我们必须理解什么是Linux Shell？怎么去使用Linux Shell？ Linux Shell 是一种命令行界面（CLI），它允许用户通过输入一系列命令与操作系统进行交互。Shell是一个脚本解释器，用户可以在其中编写和执行脚本来实现一系列的操作，包括文件操作、网络操作、系统配置等等。 而Shell是一种...","head":[["meta",{"property":"og:url","content":"https://xxx252525.github.io/Linux/03%E8%B5%B0%E8%BF%9BShell.html"}],["meta",{"property":"og:site_name","content":"天阁创客的三味书屋"}],["meta",{"property":"og:title","content":"03-走进Shell"}],["meta",{"property":"og:description","content":"03-走进Shell 认识Shell 首先我们必须理解什么是Linux Shell？怎么去使用Linux Shell？ Linux Shell 是一种命令行界面（CLI），它允许用户通过输入一系列命令与操作系统进行交互。Shell是一个脚本解释器，用户可以在其中编写和执行脚本来实现一系列的操作，包括文件操作、网络操作、系统配置等等。 而Shell是一种..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-18T14:17:22.000Z"}],["meta",{"property":"article:published_time","content":"2023-02-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-18T14:17:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03-走进Shell\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-18T14:17:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"天阁创客official\\",\\"url\\":\\"https://tiangesec.org.cn\\",\\"email\\":\\"tiangesec@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"认识Shell","slug":"认识shell","link":"#认识shell","children":[]},{"level":2,"title":"命令提示符","slug":"命令提示符","link":"#命令提示符","children":[{"level":3,"title":"shell命令的语法","slug":"shell命令的语法","link":"#shell命令的语法","children":[]}]},{"level":2,"title":"常见的命令","slug":"常见的命令","link":"#常见的命令","children":[{"level":3,"title":"命令存放路径","slug":"命令存放路径","link":"#命令存放路径","children":[]}]},{"level":2,"title":"超级用户","slug":"超级用户","link":"#超级用户","children":[{"level":3,"title":"su","slug":"su","link":"#su","children":[]},{"level":3,"title":"sudo","slug":"sudo","link":"#sudo","children":[]},{"level":3,"title":"退出root环境","slug":"退出root环境","link":"#退出root环境","children":[]}]},{"level":2,"title":"命令行编辑","slug":"命令行编辑","link":"#命令行编辑","children":[{"level":3,"title":"工作模式","slug":"工作模式","link":"#工作模式","children":[]}]},{"level":2,"title":"命令行其他操作","slug":"命令行其他操作","link":"#命令行其他操作","children":[{"level":3,"title":"补全与提示","slug":"补全与提示","link":"#补全与提示","children":[]},{"level":3,"title":"重复执行","slug":"重复执行","link":"#重复执行","children":[]},{"level":3,"title":"多行执行","slug":"多行执行","link":"#多行执行","children":[]},{"level":3,"title":"连续命令","slug":"连续命令","link":"#连续命令","children":[]},{"level":3,"title":"后台命令","slug":"后台命令","link":"#后台命令","children":[]}]}],"git":{"createdTime":1739772796000,"updatedTime":1739888242000,"contributors":[{"name":"xxx252525","username":"xxx252525","email":"1072441436@qq.com","commits":3,"url":"https://github.com/xxx252525"}]},"readingTime":{"minutes":17.17,"words":5151},"filePathRelative":"Linux/03走进Shell.md","localizedDate":"2023年2月17日","autoDesc":true}')}}]);